{"ast":null,"code":"import axios from \"axios\";\nimport axiosInstance from \"../../helpers/AxiosInstance\";\nimport { LOGIN_LOADING, LOGIN_SUCCESS, LOGIN_ERROR, LOGOUT_SUCCESS, LOGOUT_ERROR } from \"../../helpers/constants\";\nimport History from \"../../utils/history\";\nimport AxiosInstance from \"../../helpers/AxiosInstance\";\nexport const login = ({\n  email,\n  password\n}) => dispatch => {\n  dispatch({\n    type: LOGIN_LOADING\n  });\n  console.log(email, password);\n  AxiosInstance.post(\"/auth\", JSON.stringify({\n    username: email,\n    password: password\n  })).then(res => {\n    localStorage.setItem('token', res.data.access_token);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    History.push('/dashboard');\n  }).catch(err => {\n    console.log(\"error\", err);\n    dispatch({\n      type: LOGIN_ERROR,\n      payload: err.response ? err.response.data : \"COULD NOT CONNECT\"\n    });\n  });\n};\nexport const logout = () => {\n  // console.log(email, password)\n  window.localStorage.clear();\n  History.push('/login');\n  console.log(\"there??\", localStorage.token);\n};\nexport const signup = ({\n  email,\n  brand,\n  keywords,\n  password\n}) => dispatch => {\n  dispatch({\n    type: LOGIN_LOADING\n  });\n  const options = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\"\n    }\n  };\n  console.log(email, password);\n  axios.post(\"localhost:5000/form\", JSON.stringify({\n    username: email,\n    brand: brand,\n    keywords: keywords,\n    password: password\n  }), options).then(res => {\n    console.log(\"succcesss bitccchh!!!\", res);\n  }).catch(err => {\n    console.log(\"error!!!\", err);\n    dispatch({\n      type: LOGIN_ERROR,\n      payload: err.response ? err.response.data : \"COULD NOT CONNECT\"\n    });\n  });\n};","map":{"version":3,"sources":["/home/riya/social-monitoring/src/context/actions/auth.js"],"names":["axios","axiosInstance","LOGIN_LOADING","LOGIN_SUCCESS","LOGIN_ERROR","LOGOUT_SUCCESS","LOGOUT_ERROR","History","AxiosInstance","login","email","password","dispatch","type","console","log","post","JSON","stringify","username","then","res","localStorage","setItem","data","access_token","payload","push","catch","err","response","logout","window","clear","token","signup","brand","keywords","options","headers","Accept"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport axiosInstance from \"../../helpers/AxiosInstance\";\nimport {\n  LOGIN_LOADING,\n  LOGIN_SUCCESS,\n  LOGIN_ERROR,\n  LOGOUT_SUCCESS,\n  LOGOUT_ERROR\n} from \"../../helpers/constants\";\nimport History from \"../../utils/history\";\nimport AxiosInstance from \"../../helpers/AxiosInstance\"\n\n\n\nexport const login = ({ email, password }) => (dispatch) => {\n  dispatch({\n    type: LOGIN_LOADING,\n  });\n\n  console.log(email, password)\n\n  AxiosInstance.post(\"/auth\", JSON.stringify({\n    username: email,\n    password: password\n  }))\n    .then((res) => {\n      localStorage.setItem('token', res.data.access_token)\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data,\n      });\n      History.push('/dashboard')\n    })\n    .catch((err) => {\n      console.log(\"error\", err)\n      dispatch({\n        type: LOGIN_ERROR,\n        payload: err.response ? err.response.data : \"COULD NOT CONNECT\",\n      });\n    })\n}\n\nexport const logout = () => {\n  // console.log(email, password)\n  window.localStorage.clear();\n  History.push('/login')\n  console.log(\"there??\", localStorage.token)\n}\n\n\nexport const signup = ({ email, brand, keywords, password }) => (dispatch) => {\n  dispatch({\n    type: LOGIN_LOADING,\n  });\n\n  const options = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\"\n    }\n  };\n\n  console.log(email, password)\n\n  axios.post(\"localhost:5000/form\", JSON.stringify({\n    username: email,\n    brand: brand,\n    keywords: keywords,\n    password: password,\n  }), options)\n    .then((res) => {\n      console.log(\"succcesss bitccchh!!!\", res)\n    })\n    .catch((err) => {\n      console.log(\"error!!!\", err)\n      dispatch({\n        type: LOGIN_ERROR,\n        payload: err.response ? err.response.data : \"COULD NOT CONNECT\",\n      });\n    })\n}\n\n"]},"metadata":{},"sourceType":"module"}