{"ast":null,"code":"// A Javascript implementaion of the \"Tyche-i\" prng algorithm by\n// Samuel Neves and Filipe Araujo.\n// See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n(function (global, module, define) {\n  function XorGen(seed) {\n    var me = this,\n        strseed = ''; // Set up generator function.\n\n    me.next = function () {\n      var b = me.b,\n          c = me.c,\n          d = me.d,\n          a = me.a;\n      b = b << 25 ^ b >>> 7 ^ c;\n      c = c - d | 0;\n      d = d << 24 ^ d >>> 8 ^ a;\n      a = a - b | 0;\n      me.b = b = b << 20 ^ b >>> 12 ^ c;\n      me.c = c = c - d | 0;\n      me.d = d << 16 ^ c >>> 16 ^ a;\n      return me.a = a - b | 0;\n    };\n    /* The following is non-inverted tyche, which has better internal\n     * bit diffusion, but which is about 25% slower than tyche-i in JS.\n    me.next = function() {\n      var a = me.a, b = me.b, c = me.c, d = me.d;\n      a = (me.a + me.b | 0) >>> 0;\n      d = me.d ^ a; d = d << 16 ^ d >>> 16;\n      c = me.c + d | 0;\n      b = me.b ^ c; b = b << 12 ^ d >>> 20;\n      me.a = a = a + b | 0;\n      d = d ^ a; me.d = d = d << 8 ^ d >>> 24;\n      me.c = c = c + d | 0;\n      b = b ^ c;\n      return me.b = (b << 7 ^ b >>> 25);\n    }\n    */\n\n\n    me.a = 0;\n    me.b = 0;\n    me.c = 2654435769 | 0;\n    me.d = 1367130551;\n\n    if (seed === Math.floor(seed)) {\n      // Integer seed.\n      me.a = seed / 0x100000000 | 0;\n      me.b = seed | 0;\n    } else {\n      // String seed.\n      strseed += seed;\n    } // Mix in string seed, then discard an initial batch of 64 values.\n\n\n    for (var k = 0; k < strseed.length + 20; k++) {\n      me.b ^= strseed.charCodeAt(k) | 0;\n      me.next();\n    }\n  }\n\n  function copy(f, t) {\n    t.a = f.a;\n    t.b = f.b;\n    t.c = f.c;\n    t.d = f.d;\n    return t;\n  }\n\n  ;\n\n  function impl(seed, opts) {\n    var xg = new XorGen(seed),\n        state = opts && opts.state,\n        prng = function () {\n      return (xg.next() >>> 0) / 0x100000000;\n    };\n\n    prng.double = function () {\n      do {\n        var top = xg.next() >>> 11,\n            bot = (xg.next() >>> 0) / 0x100000000,\n            result = (top + bot) / (1 << 21);\n      } while (result === 0);\n\n      return result;\n    };\n\n    prng.int32 = xg.next;\n    prng.quick = prng;\n\n    if (state) {\n      if (typeof state == 'object') copy(state, xg);\n\n      prng.state = function () {\n        return copy(xg, {});\n      };\n    }\n\n    return prng;\n  }\n\n  if (module && module.exports) {\n    module.exports = impl;\n  } else if (define && define.amd) {\n    define(function () {\n      return impl;\n    });\n  } else {\n    this.tychei = impl;\n  }\n})(this, typeof module == 'object' && module, // present in node.js\ntypeof define == 'function' && define // present with an AMD loader\n);","map":{"version":3,"sources":["/home/riya/social-monitoring/node_modules/seedrandom/lib/tychei.js"],"names":["global","module","define","XorGen","seed","me","strseed","next","b","c","d","a","Math","floor","k","length","charCodeAt","copy","f","t","impl","opts","xg","state","prng","double","top","bot","result","int32","quick","exports","amd","tychei"],"mappings":"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","sourcesContent":["// A Javascript implementaion of the \"Tyche-i\" prng algorithm by\n// Samuel Neves and Filipe Araujo.\n// See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  // Set up generator function.\n  me.next = function() {\n    var b = me.b, c = me.c, d = me.d, a = me.a;\n    b = (b << 25) ^ (b >>> 7) ^ c;\n    c = (c - d) | 0;\n    d = (d << 24) ^ (d >>> 8) ^ a;\n    a = (a - b) | 0;\n    me.b = b = (b << 20) ^ (b >>> 12) ^ c;\n    me.c = c = (c - d) | 0;\n    me.d = (d << 16) ^ (c >>> 16) ^ a;\n    return me.a = (a - b) | 0;\n  };\n\n  /* The following is non-inverted tyche, which has better internal\n   * bit diffusion, but which is about 25% slower than tyche-i in JS.\n  me.next = function() {\n    var a = me.a, b = me.b, c = me.c, d = me.d;\n    a = (me.a + me.b | 0) >>> 0;\n    d = me.d ^ a; d = d << 16 ^ d >>> 16;\n    c = me.c + d | 0;\n    b = me.b ^ c; b = b << 12 ^ d >>> 20;\n    me.a = a = a + b | 0;\n    d = d ^ a; me.d = d = d << 8 ^ d >>> 24;\n    me.c = c = c + d | 0;\n    b = b ^ c;\n    return me.b = (b << 7 ^ b >>> 25);\n  }\n  */\n\n  me.a = 0;\n  me.b = 0;\n  me.c = 2654435769 | 0;\n  me.d = 1367130551;\n\n  if (seed === Math.floor(seed)) {\n    // Integer seed.\n    me.a = (seed / 0x100000000) | 0;\n    me.b = seed | 0;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 20; k++) {\n    me.b ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.a = f.a;\n  t.b = f.b;\n  t.c = f.c;\n  t.d = f.d;\n  return t;\n};\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.tychei = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n"]},"metadata":{},"sourceType":"script"}