{"ast":null,"code":"// A Javascript implementaion of the \"xorwow\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n(function (global, module, define) {\n  function XorGen(seed) {\n    var me = this,\n        strseed = ''; // Set up generator function.\n\n    me.next = function () {\n      var t = me.x ^ me.x >>> 2;\n      me.x = me.y;\n      me.y = me.z;\n      me.z = me.w;\n      me.w = me.v;\n      return (me.d = me.d + 362437 | 0) + (me.v = me.v ^ me.v << 4 ^ (t ^ t << 1)) | 0;\n    };\n\n    me.x = 0;\n    me.y = 0;\n    me.z = 0;\n    me.w = 0;\n    me.v = 0;\n\n    if (seed === (seed | 0)) {\n      // Integer seed.\n      me.x = seed;\n    } else {\n      // String seed.\n      strseed += seed;\n    } // Mix in string seed, then discard an initial batch of 64 values.\n\n\n    for (var k = 0; k < strseed.length + 64; k++) {\n      me.x ^= strseed.charCodeAt(k) | 0;\n\n      if (k == strseed.length) {\n        me.d = me.x << 10 ^ me.x >>> 4;\n      }\n\n      me.next();\n    }\n  }\n\n  function copy(f, t) {\n    t.x = f.x;\n    t.y = f.y;\n    t.z = f.z;\n    t.w = f.w;\n    t.v = f.v;\n    t.d = f.d;\n    return t;\n  }\n\n  function impl(seed, opts) {\n    var xg = new XorGen(seed),\n        state = opts && opts.state,\n        prng = function () {\n      return (xg.next() >>> 0) / 0x100000000;\n    };\n\n    prng.double = function () {\n      do {\n        var top = xg.next() >>> 11,\n            bot = (xg.next() >>> 0) / 0x100000000,\n            result = (top + bot) / (1 << 21);\n      } while (result === 0);\n\n      return result;\n    };\n\n    prng.int32 = xg.next;\n    prng.quick = prng;\n\n    if (state) {\n      if (typeof state == 'object') copy(state, xg);\n\n      prng.state = function () {\n        return copy(xg, {});\n      };\n    }\n\n    return prng;\n  }\n\n  if (module && module.exports) {\n    module.exports = impl;\n  } else if (define && define.amd) {\n    define(function () {\n      return impl;\n    });\n  } else {\n    this.xorwow = impl;\n  }\n})(this, typeof module == 'object' && module, // present in node.js\ntypeof define == 'function' && define // present with an AMD loader\n);","map":{"version":3,"sources":["/home/riya/social-monitoring/node_modules/seedrandom/lib/xorwow.js"],"names":["global","module","define","XorGen","seed","me","strseed","next","t","x","y","z","w","v","d","k","length","charCodeAt","copy","f","impl","opts","xg","state","prng","double","top","bot","result","int32","quick","exports","amd","xorwow"],"mappings":"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","sourcesContent":["// A Javascript implementaion of the \"xorwow\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  // Set up generator function.\n  me.next = function() {\n    var t = (me.x ^ (me.x >>> 2));\n    me.x = me.y; me.y = me.z; me.z = me.w; me.w = me.v;\n    return (me.d = (me.d + 362437 | 0)) +\n       (me.v = (me.v ^ (me.v << 4)) ^ (t ^ (t << 1))) | 0;\n  };\n\n  me.x = 0;\n  me.y = 0;\n  me.z = 0;\n  me.w = 0;\n  me.v = 0;\n\n  if (seed === (seed | 0)) {\n    // Integer seed.\n    me.x = seed;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 64; k++) {\n    me.x ^= strseed.charCodeAt(k) | 0;\n    if (k == strseed.length) {\n      me.d = me.x << 10 ^ me.x >>> 4;\n    }\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.x = f.x;\n  t.y = f.y;\n  t.z = f.z;\n  t.w = f.w;\n  t.v = f.v;\n  t.d = f.d;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xorwow = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n"]},"metadata":{},"sourceType":"script"}