{"ast":null,"code":"import React, { memo, useMemo } from 'react';\nimport { animated, useSpring, useTransition } from 'react-spring';\nimport { textPropsByEngine, useTheme, useMotionConfig } from '@nivo/core';\nimport { timeMillisecond, utcMillisecond, timeSecond, utcSecond, timeMinute, utcMinute, timeHour, utcHour, timeDay, utcDay, timeWeek, utcWeek, timeSunday, utcSunday, timeMonday, utcMonday, timeTuesday, utcTuesday, timeWednesday, utcWednesday, timeThursday, utcThursday, timeFriday, utcFriday, timeSaturday, utcSaturday, timeMonth, utcMonth, timeYear, utcYear } from 'd3-time';\nimport { timeFormat } from 'd3-time-format';\nimport { format } from 'd3-format';\nimport PropTypes from 'prop-types';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar centerScale = function centerScale(scale) {\n  var bandwidth = scale.bandwidth();\n  if (bandwidth === 0) return scale;\n  var offset = bandwidth / 2;\n\n  if (scale.round()) {\n    offset = Math.round(offset);\n  }\n\n  return function (d) {\n    return scale(d) + offset;\n  };\n};\n\nvar timeByType = {\n  millisecond: [timeMillisecond, utcMillisecond],\n  second: [timeSecond, utcSecond],\n  minute: [timeMinute, utcMinute],\n  hour: [timeHour, utcHour],\n  day: [timeDay, utcDay],\n  week: [timeWeek, utcWeek],\n  sunday: [timeSunday, utcSunday],\n  monday: [timeMonday, utcMonday],\n  tuesday: [timeTuesday, utcTuesday],\n  wednesday: [timeWednesday, utcWednesday],\n  thursday: [timeThursday, utcThursday],\n  friday: [timeFriday, utcFriday],\n  saturday: [timeSaturday, utcSaturday],\n  month: [timeMonth, utcMonth],\n  year: [timeYear, utcYear]\n};\nvar timeTypes = Object.keys(timeByType);\nvar timeIntervalRegexp = new RegExp(\"^every\\\\s*(\\\\d+)?\\\\s*(\".concat(timeTypes.join('|'), \")s?$\"), 'i');\n\nvar isInteger = function isInteger(value) {\n  return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\n};\n\nvar getScaleTicks = function getScaleTicks(scale, spec) {\n  if (Array.isArray(spec)) {\n    return spec;\n  }\n\n  if (scale.ticks) {\n    if (spec === undefined) {\n      return scale.ticks();\n    }\n\n    if (isInteger(spec)) {\n      return scale.ticks(spec);\n    }\n\n    if (typeof spec === 'string') {\n      var matches = spec.match(timeIntervalRegexp);\n\n      if (matches) {\n        var timeType = timeByType[matches[2]][scale.useUTC ? 1 : 0];\n\n        if (matches[1] === undefined) {\n          return scale.ticks(timeType);\n        }\n\n        return scale.ticks(timeType.every(Number(matches[1])));\n      }\n\n      throw new Error(\"Invalid tickValues: \".concat(spec));\n    }\n  }\n\n  return scale.domain();\n};\n\nvar computeCartesianTicks = function computeCartesianTicks(_ref) {\n  var axis = _ref.axis,\n      scale = _ref.scale,\n      ticksPosition = _ref.ticksPosition,\n      tickValues = _ref.tickValues,\n      tickSize = _ref.tickSize,\n      tickPadding = _ref.tickPadding,\n      tickRotation = _ref.tickRotation,\n      _ref$engine = _ref.engine,\n      engine = _ref$engine === void 0 ? 'svg' : _ref$engine;\n  var values = getScaleTicks(scale, tickValues);\n  var textProps = textPropsByEngine[engine];\n  var position = scale.bandwidth ? centerScale(scale) : scale;\n  var line = {\n    lineX: 0,\n    lineY: 0\n  };\n  var text = {\n    textX: 0,\n    textY: 0\n  };\n  var translate;\n  var textAlign = textProps.align.center;\n  var textBaseline = textProps.baseline.center;\n\n  if (axis === 'x') {\n    translate = function translate(d) {\n      return {\n        x: position(d),\n        y: 0\n      };\n    };\n\n    line.lineY = tickSize * (ticksPosition === 'after' ? 1 : -1);\n    text.textY = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1);\n\n    if (ticksPosition === 'after') {\n      textBaseline = textProps.baseline.top;\n    } else {\n      textBaseline = textProps.baseline.bottom;\n    }\n\n    if (tickRotation === 0) {\n      textAlign = textProps.align.center;\n    } else if (ticksPosition === 'after' && tickRotation < 0 || ticksPosition === 'before' && tickRotation > 0) {\n      textAlign = textProps.align.right;\n      textBaseline = textProps.baseline.center;\n    } else if (ticksPosition === 'after' && tickRotation > 0 || ticksPosition === 'before' && tickRotation < 0) {\n      textAlign = textProps.align.left;\n      textBaseline = textProps.baseline.center;\n    }\n  } else {\n    translate = function translate(d) {\n      return {\n        x: 0,\n        y: position(d)\n      };\n    };\n\n    line.lineX = tickSize * (ticksPosition === 'after' ? 1 : -1);\n    text.textX = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1);\n\n    if (ticksPosition === 'after') {\n      textAlign = textProps.align.left;\n    } else {\n      textAlign = textProps.align.right;\n    }\n  }\n\n  var ticks = values.map(function (value) {\n    return _objectSpread2(_objectSpread2(_objectSpread2({\n      key: value,\n      value: value\n    }, translate(value)), line), text);\n  });\n  return {\n    ticks: ticks,\n    textAlign: textAlign,\n    textBaseline: textBaseline\n  };\n};\n\nvar getFormatter = function getFormatter(format$1, scale) {\n  if (!format$1 || typeof format$1 === 'function') return format$1;\n\n  if (scale.type === 'time') {\n    var f = timeFormat(format$1);\n    return function (d) {\n      return f(new Date(d));\n    };\n  }\n\n  return format(format$1);\n};\n\nvar computeGridLines = function computeGridLines(_ref2) {\n  var width = _ref2.width,\n      height = _ref2.height,\n      scale = _ref2.scale,\n      axis = _ref2.axis,\n      _values = _ref2.values;\n  var lineValues = Array.isArray(_values) ? _values : undefined;\n  var lineCount = isInteger(_values) ? _values : undefined;\n  var values = lineValues || getScaleTicks(scale, lineCount);\n  var position = scale.bandwidth ? centerScale(scale) : scale;\n  var lines;\n\n  if (axis === 'x') {\n    lines = values.map(function (v) {\n      return {\n        key: \"\".concat(v),\n        x1: position(v),\n        x2: position(v),\n        y1: 0,\n        y2: height\n      };\n    });\n  } else if (axis === 'y') {\n    lines = values.map(function (v) {\n      return {\n        key: \"\".concat(v),\n        x1: 0,\n        x2: width,\n        y1: position(v),\n        y2: position(v)\n      };\n    });\n  }\n\n  return lines;\n};\n\nvar axisPropTypes = {\n  ticksPosition: PropTypes.oneOf(['before', 'after']),\n  tickValues: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])), PropTypes.string]),\n  tickSize: PropTypes.number,\n  tickPadding: PropTypes.number,\n  tickRotation: PropTypes.number,\n  format: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  renderTick: PropTypes.func,\n  legend: PropTypes.node,\n  legendPosition: PropTypes.oneOf(['start', 'middle', 'end']),\n  legendOffset: PropTypes.number,\n  ariaHidden: PropTypes.bool\n};\nvar axisPropType = PropTypes.shape(axisPropTypes);\n\nvar AxisTick = function AxisTick(_ref) {\n  var _value = _ref.value,\n      format = _ref.format,\n      lineX = _ref.lineX,\n      lineY = _ref.lineY,\n      _onClick = _ref.onClick,\n      textBaseline = _ref.textBaseline,\n      textAnchor = _ref.textAnchor,\n      animatedProps = _ref.animatedProps;\n  var theme = useTheme();\n  var value = _value;\n\n  if (format !== undefined) {\n    value = format(value);\n  }\n\n  var gStyle = {\n    opacity: animatedProps.opacity\n  };\n\n  if (_onClick) {\n    gStyle['cursor'] = 'pointer';\n  }\n\n  return React.createElement(animated.g, Object.assign({\n    transform: animatedProps.transform\n  }, _onClick ? {\n    onClick: function onClick(e) {\n      return _onClick(e, value);\n    }\n  } : {}, {\n    style: gStyle\n  }), React.createElement(\"line\", {\n    x1: 0,\n    x2: lineX,\n    y1: 0,\n    y2: lineY,\n    style: theme.axis.ticks.line\n  }), React.createElement(animated.text, {\n    dominantBaseline: textBaseline,\n    textAnchor: textAnchor,\n    transform: animatedProps.textTransform,\n    style: theme.axis.ticks.text\n  }, value));\n};\n\nAxisTick.defaultProps = {\n  opacity: 1,\n  rotate: 0\n};\nvar AxisTick$1 = memo(AxisTick);\n\nvar defaultTickRenderer = function defaultTickRenderer(props) {\n  return React.createElement(AxisTick$1, props);\n};\n\nvar Axis = function Axis(_ref) {\n  var axis = _ref.axis,\n      scale = _ref.scale,\n      x = _ref.x,\n      y = _ref.y,\n      length = _ref.length,\n      ticksPosition = _ref.ticksPosition,\n      tickValues = _ref.tickValues,\n      tickSize = _ref.tickSize,\n      tickPadding = _ref.tickPadding,\n      tickRotation = _ref.tickRotation,\n      format = _ref.format,\n      renderTick = _ref.renderTick,\n      legend = _ref.legend,\n      legendPosition = _ref.legendPosition,\n      legendOffset = _ref.legendOffset,\n      onClick = _ref.onClick,\n      ariaHidden = _ref.ariaHidden;\n  var theme = useTheme();\n  var formatValue = useMemo(function () {\n    return getFormatter(format, scale);\n  }, [format, scale]);\n\n  var _computeCartesianTick = computeCartesianTicks({\n    axis: axis,\n    scale: scale,\n    ticksPosition: ticksPosition,\n    tickValues: tickValues,\n    tickSize: tickSize,\n    tickPadding: tickPadding,\n    tickRotation: tickRotation\n  }),\n      ticks = _computeCartesianTick.ticks,\n      textAlign = _computeCartesianTick.textAlign,\n      textBaseline = _computeCartesianTick.textBaseline;\n\n  var legendNode = null;\n\n  if (legend !== undefined) {\n    var legendX = 0;\n    var legendY = 0;\n    var legendRotation = 0;\n    var textAnchor;\n\n    if (axis === 'y') {\n      legendRotation = -90;\n      legendX = legendOffset;\n\n      if (legendPosition === 'start') {\n        textAnchor = 'start';\n        legendY = length;\n      } else if (legendPosition === 'middle') {\n        textAnchor = 'middle';\n        legendY = length / 2;\n      } else if (legendPosition === 'end') {\n        textAnchor = 'end';\n      }\n    } else {\n      legendY = legendOffset;\n\n      if (legendPosition === 'start') {\n        textAnchor = 'start';\n      } else if (legendPosition === 'middle') {\n        textAnchor = 'middle';\n        legendX = length / 2;\n      } else if (legendPosition === 'end') {\n        textAnchor = 'end';\n        legendX = length;\n      }\n    }\n\n    legendNode = React.createElement(\"text\", {\n      transform: \"translate(\".concat(legendX, \", \").concat(legendY, \") rotate(\").concat(legendRotation, \")\"),\n      textAnchor: textAnchor,\n      style: _objectSpread2({\n        dominantBaseline: 'central'\n      }, theme.axis.legend.text)\n    }, legend);\n  }\n\n  var _useMotionConfig = useMotionConfig(),\n      animate = _useMotionConfig.animate,\n      springConfig = _useMotionConfig.config;\n\n  var animatedProps = useSpring({\n    transform: \"translate(\".concat(x, \",\").concat(y, \")\"),\n    lineX2: axis === 'x' ? length : 0,\n    lineY2: axis === 'x' ? 0 : length,\n    config: springConfig,\n    immediate: !animate\n  });\n  var transition = useTransition(ticks, {\n    key: function key(tick) {\n      return tick.key;\n    },\n    initial: function initial(tick) {\n      return {\n        opacity: 1,\n        transform: \"translate(\".concat(tick.x, \",\").concat(tick.y, \")\"),\n        textTransform: \"translate(\".concat(tick.textX, \",\").concat(tick.textY, \") rotate(\").concat(tickRotation, \")\")\n      };\n    },\n    from: function from(tick) {\n      return {\n        opacity: 0,\n        transform: \"translate(\".concat(tick.x, \",\").concat(tick.y, \")\"),\n        textTransform: \"translate(\".concat(tick.textX, \",\").concat(tick.textY, \") rotate(\").concat(tickRotation, \")\")\n      };\n    },\n    enter: function enter(tick) {\n      return {\n        opacity: 1,\n        transform: \"translate(\".concat(tick.x, \",\").concat(tick.y, \")\"),\n        textTransform: \"translate(\".concat(tick.textX, \",\").concat(tick.textY, \") rotate(\").concat(tickRotation, \")\")\n      };\n    },\n    update: function update(tick) {\n      return {\n        opacity: 1,\n        transform: \"translate(\".concat(tick.x, \",\").concat(tick.y, \")\"),\n        textTransform: \"translate(\".concat(tick.textX, \",\").concat(tick.textY, \") rotate(\").concat(tickRotation, \")\")\n      };\n    },\n    leave: {\n      opacity: 0\n    },\n    config: springConfig,\n    immediate: !animate\n  });\n  return React.createElement(animated.g, {\n    transform: animatedProps.transform,\n    \"aria-hidden\": ariaHidden\n  }, transition(function (transitionProps, tick, state, tickIndex) {\n    return React.createElement(renderTick, _objectSpread2(_objectSpread2(_objectSpread2({\n      tickIndex: tickIndex,\n      format: formatValue,\n      rotate: tickRotation,\n      textBaseline: textBaseline,\n      textAnchor: textAlign,\n      animatedProps: transitionProps\n    }, tick), onClick ? {\n      onClick: onClick\n    } : {}), {}, {\n      key: tick.key\n    }));\n  }), React.createElement(animated.line, {\n    style: theme.axis.domain.line,\n    x1: 0,\n    x2: animatedProps.lineX2,\n    y1: 0,\n    y2: animatedProps.lineY2\n  }), legendNode);\n};\n\nAxis.defaultProps = {\n  x: 0,\n  y: 0,\n  tickSize: 5,\n  tickPadding: 5,\n  tickRotation: 0,\n  renderTick: defaultTickRenderer,\n  legendPosition: 'end',\n  legendOffset: 0\n};\nvar Axis$1 = memo(Axis);\nvar positions = ['top', 'right', 'bottom', 'left'];\n\nvar Axes = function Axes(_ref) {\n  var xScale = _ref.xScale,\n      yScale = _ref.yScale,\n      width = _ref.width,\n      height = _ref.height,\n      top = _ref.top,\n      right = _ref.right,\n      bottom = _ref.bottom,\n      left = _ref.left;\n  var axes = {\n    top: top,\n    right: right,\n    bottom: bottom,\n    left: left\n  };\n  return positions.map(function (position) {\n    var axis = axes[position];\n    if (!axis) return null;\n    var isXAxis = position === 'top' || position === 'bottom';\n    var ticksPosition = position === 'top' || position === 'left' ? 'before' : 'after';\n    return React.createElement(Axis$1, Object.assign({\n      key: position\n    }, axis, {\n      axis: isXAxis ? 'x' : 'y',\n      x: position === 'right' ? width : 0,\n      y: position === 'bottom' ? height : 0,\n      scale: isXAxis ? xScale : yScale,\n      length: isXAxis ? width : height,\n      ticksPosition: ticksPosition\n    }));\n  });\n};\n\nvar Axes$1 = memo(Axes);\n\nvar GridLine = function GridLine(_ref) {\n  var animatedProps = _ref.animatedProps;\n  var theme = useTheme();\n  return React.createElement(animated.line, Object.assign({}, animatedProps, theme.grid.line));\n};\n\nGridLine.defaultProps = {\n  x1: 0,\n  x2: 0,\n  y1: 0,\n  y2: 0\n};\nvar GridLine$1 = memo(GridLine);\n\nvar GridLines = function GridLines(_ref) {\n  var lines = _ref.lines;\n\n  var _useMotionConfig = useMotionConfig(),\n      animate = _useMotionConfig.animate,\n      springConfig = _useMotionConfig.config;\n\n  var transition = useTransition(lines, {\n    key: function key(line) {\n      return line.key;\n    },\n    initial: function initial(line) {\n      return {\n        opacity: 1,\n        x1: line.x1,\n        x2: line.x2,\n        y1: line.y1,\n        y2: line.y2\n      };\n    },\n    from: function from(line) {\n      return {\n        opacity: 0,\n        x1: line.x1,\n        x2: line.x2,\n        y1: line.y1,\n        y2: line.y2\n      };\n    },\n    enter: function enter(line) {\n      return {\n        opacity: 1,\n        x1: line.x1,\n        x2: line.x2,\n        y1: line.y1,\n        y2: line.y2\n      };\n    },\n    update: function update(line) {\n      return {\n        opacity: 1,\n        x1: line.x1,\n        x2: line.x2,\n        y1: line.y1,\n        y2: line.y2\n      };\n    },\n    leave: {\n      opacity: 0\n    },\n    config: springConfig,\n    immediate: !animate\n  });\n  return React.createElement(\"g\", null, transition(function (animatedProps, line) {\n    return React.createElement(GridLine$1, Object.assign({}, line, {\n      key: line.key,\n      animatedProps: animatedProps\n    }));\n  }));\n};\n\nvar GridLines$1 = memo(GridLines);\n\nvar Grid = function Grid(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      xScale = _ref.xScale,\n      yScale = _ref.yScale,\n      xValues = _ref.xValues,\n      yValues = _ref.yValues;\n  var xLines = useMemo(function () {\n    if (!xScale) return false;\n    return computeGridLines({\n      width: width,\n      height: height,\n      scale: xScale,\n      axis: 'x',\n      values: xValues\n    });\n  }, [xScale, xValues, width, height]);\n  var yLines = yScale ? computeGridLines({\n    width: width,\n    height: height,\n    scale: yScale,\n    axis: 'y',\n    values: yValues\n  }) : false;\n  return React.createElement(React.Fragment, null, xLines && React.createElement(GridLines$1, {\n    type: \"x\",\n    lines: xLines\n  }), yLines && React.createElement(GridLines$1, {\n    type: \"y\",\n    lines: yLines\n  }));\n};\n\nvar Grid$1 = memo(Grid);\n\nvar degreesToRadians = function degreesToRadians(degrees) {\n  return degrees * Math.PI / 180;\n};\n\nvar renderAxisToCanvas = function renderAxisToCanvas(ctx, _ref) {\n  var axis = _ref.axis,\n      scale = _ref.scale,\n      _ref$x = _ref.x,\n      x = _ref$x === void 0 ? 0 : _ref$x,\n      _ref$y = _ref.y,\n      y = _ref$y === void 0 ? 0 : _ref$y,\n      length = _ref.length,\n      ticksPosition = _ref.ticksPosition,\n      tickValues = _ref.tickValues,\n      _ref$tickSize = _ref.tickSize,\n      tickSize = _ref$tickSize === void 0 ? 5 : _ref$tickSize,\n      _ref$tickPadding = _ref.tickPadding,\n      tickPadding = _ref$tickPadding === void 0 ? 5 : _ref$tickPadding,\n      _ref$tickRotation = _ref.tickRotation,\n      tickRotation = _ref$tickRotation === void 0 ? 0 : _ref$tickRotation,\n      format = _ref.format,\n      legend = _ref.legend,\n      _ref$legendPosition = _ref.legendPosition,\n      legendPosition = _ref$legendPosition === void 0 ? 'end' : _ref$legendPosition,\n      _ref$legendOffset = _ref.legendOffset,\n      legendOffset = _ref$legendOffset === void 0 ? 0 : _ref$legendOffset,\n      theme = _ref.theme;\n\n  var _computeCartesianTick = computeCartesianTicks({\n    axis: axis,\n    scale: scale,\n    ticksPosition: ticksPosition,\n    tickValues: tickValues,\n    tickSize: tickSize,\n    tickPadding: tickPadding,\n    tickRotation: tickRotation,\n    engine: 'canvas'\n  }),\n      ticks = _computeCartesianTick.ticks,\n      textAlign = _computeCartesianTick.textAlign,\n      textBaseline = _computeCartesianTick.textBaseline;\n\n  ctx.save();\n  ctx.translate(x, y);\n  ctx.textAlign = textAlign;\n  ctx.textBaseline = textBaseline;\n  ctx.font = \"\".concat(theme.axis.ticks.text.fontSize, \"px \").concat(theme.axis.ticks.text.fontFamily);\n\n  if (theme.axis.domain.line.strokeWidth > 0) {\n    ctx.lineWidth = theme.axis.domain.line.strokeWidth;\n    ctx.lineCap = 'square';\n    ctx.strokeStyle = theme.axis.domain.line.stroke;\n    ctx.beginPath();\n    ctx.moveTo(0, 0);\n    ctx.lineTo(axis === 'x' ? length : 0, axis === 'x' ? 0 : length);\n    ctx.stroke();\n  }\n\n  ticks.forEach(function (tick) {\n    if (theme.axis.ticks.line.strokeWidth > 0) {\n      ctx.lineWidth = theme.axis.ticks.line.strokeWidth;\n      ctx.lineCap = 'square';\n      ctx.strokeStyle = theme.axis.ticks.line.stroke;\n      ctx.beginPath();\n      ctx.moveTo(tick.x, tick.y);\n      ctx.lineTo(tick.x + tick.lineX, tick.y + tick.lineY);\n      ctx.stroke();\n    }\n\n    var value = format !== undefined ? format(tick.value) : tick.value;\n    ctx.save();\n    ctx.translate(tick.x + tick.textX, tick.y + tick.textY);\n    ctx.rotate(degreesToRadians(tickRotation));\n    ctx.fillStyle = theme.axis.ticks.text.fill;\n    ctx.fillText(value, 0, 0);\n    ctx.restore();\n  });\n\n  if (legend !== undefined) {\n    var legendX = 0;\n    var legendY = 0;\n    var legendRotation = 0;\n\n    var _textAlign;\n\n    if (axis === 'y') {\n      legendRotation = -90;\n      legendX = legendOffset;\n\n      if (legendPosition === 'start') {\n        _textAlign = 'start';\n        legendY = length;\n      } else if (legendPosition === 'middle') {\n        _textAlign = 'center';\n        legendY = length / 2;\n      } else if (legendPosition === 'end') {\n        _textAlign = 'end';\n      }\n    } else {\n      legendY = legendOffset;\n\n      if (legendPosition === 'start') {\n        _textAlign = 'start';\n      } else if (legendPosition === 'middle') {\n        _textAlign = 'center';\n        legendX = length / 2;\n      } else if (legendPosition === 'end') {\n        _textAlign = 'end';\n        legendX = length;\n      }\n    }\n\n    ctx.translate(legendX, legendY);\n    ctx.rotate(degreesToRadians(legendRotation));\n    ctx.font = \"\".concat(theme.axis.legend.text.fontWeight ? \"\".concat(theme.axis.legend.text.fontWeight, \" \") : '').concat(theme.axis.legend.text.fontSize, \"px \").concat(theme.axis.legend.text.fontFamily);\n    ctx.fillStyle = theme.axis.legend.text.fill;\n    ctx.textAlign = _textAlign;\n    ctx.textBaseline = 'middle';\n    ctx.fillText(legend, 0, 0);\n  }\n\n  ctx.restore();\n};\n\nvar positions$1 = ['top', 'right', 'bottom', 'left'];\n\nvar renderAxesToCanvas = function renderAxesToCanvas(ctx, _ref2) {\n  var xScale = _ref2.xScale,\n      yScale = _ref2.yScale,\n      width = _ref2.width,\n      height = _ref2.height,\n      top = _ref2.top,\n      right = _ref2.right,\n      bottom = _ref2.bottom,\n      left = _ref2.left,\n      theme = _ref2.theme;\n  var axes = {\n    top: top,\n    right: right,\n    bottom: bottom,\n    left: left\n  };\n  positions$1.forEach(function (position) {\n    var axis = axes[position];\n    if (!axis) return null;\n    var isXAxis = position === 'top' || position === 'bottom';\n    var ticksPosition = position === 'top' || position === 'left' ? 'before' : 'after';\n    var scale = isXAxis ? xScale : yScale;\n    var format = getFormatter(axis.format, scale);\n    renderAxisToCanvas(ctx, _objectSpread2(_objectSpread2({}, axis), {}, {\n      axis: isXAxis ? 'x' : 'y',\n      x: position === 'right' ? width : 0,\n      y: position === 'bottom' ? height : 0,\n      scale: scale,\n      format: format,\n      length: isXAxis ? width : height,\n      ticksPosition: ticksPosition,\n      theme: theme\n    }));\n  });\n};\n\nvar renderGridLinesToCanvas = function renderGridLinesToCanvas(ctx, _ref3) {\n  var width = _ref3.width,\n      height = _ref3.height,\n      scale = _ref3.scale,\n      axis = _ref3.axis,\n      values = _ref3.values;\n  var lines = computeGridLines({\n    width: width,\n    height: height,\n    scale: scale,\n    axis: axis,\n    values: values\n  });\n  lines.forEach(function (line) {\n    ctx.beginPath();\n    ctx.moveTo(line.x1, line.y1);\n    ctx.lineTo(line.x2, line.y2);\n    ctx.stroke();\n  });\n};\n\nexport { Axes$1 as Axes, Axis$1 as Axis, Grid$1 as Grid, axisPropType, axisPropTypes, renderAxesToCanvas, renderAxisToCanvas, renderGridLinesToCanvas };","map":{"version":3,"sources":["../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../src/compute.js","../src/props.js","../src/components/AxisTick.js","../src/components/Axis.js","../src/components/Axes.js","../src/components/GridLine.js","../src/components/GridLines.js","../src/components/Grid.js","../src/utils.js","../src/canvas.js"],"names":["defineProperty","centerScale","bandwidth","scale","offset","Math","timeByType","millisecond","second","minute","hour","day","week","sunday","monday","tuesday","wednesday","thursday","friday","saturday","month","year","timeTypes","Object","timeIntervalRegexp","isInteger","isFinite","getScaleTicks","Array","spec","matches","timeType","Number","computeCartesianTicks","axis","ticksPosition","tickValues","tickSize","tickPadding","tickRotation","engine","values","textProps","textPropsByEngine","position","line","lineX","lineY","text","textX","textY","textAlign","textBaseline","translate","x","y","ticks","key","value","getFormatter","f","timeFormat","d3Format","computeGridLines","width","height","_values","lineValues","lineCount","lines","x1","x2","y1","y2","axisPropTypes","PropTypes","format","renderTick","legend","legendPosition","legendOffset","ariaHidden","bool","axisPropType","AxisTick","_value","onClick","textAnchor","animatedProps","theme","useTheme","gStyle","opacity","transform","rotate","memo","defaultTickRenderer","Axis","length","formatValue","useMemo","legendNode","legendX","legendY","legendRotation","dominantBaseline","animate","springConfig","useMotionConfig","useSpring","lineX2","lineY2","config","immediate","transition","useTransition","tick","initial","textTransform","from","enter","update","leave","tickIndex","transitionProps","positions","Axes","xScale","yScale","top","right","bottom","left","axes","isXAxis","GridLine","GridLines","Grid","xValues","yValues","xLines","yLines","degreesToRadians","degrees","renderAxisToCanvas","ctx","renderAxesToCanvas","renderGridLinesToCanvas"],"mappings":"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","sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport {\n    timeMillisecond,\n    utcMillisecond,\n    timeSecond,\n    utcSecond,\n    timeMinute,\n    utcMinute,\n    timeHour,\n    utcHour,\n    timeDay,\n    utcDay,\n    timeWeek,\n    utcWeek,\n    timeSunday,\n    utcSunday,\n    timeMonday,\n    utcMonday,\n    timeTuesday,\n    utcTuesday,\n    timeWednesday,\n    utcWednesday,\n    timeThursday,\n    utcThursday,\n    timeFriday,\n    utcFriday,\n    timeSaturday,\n    utcSaturday,\n    timeMonth,\n    utcMonth,\n    timeYear,\n    utcYear,\n} from 'd3-time'\nimport { timeFormat } from 'd3-time-format'\nimport { format as d3Format } from 'd3-format'\nimport { textPropsByEngine } from '@nivo/core'\n\nexport const centerScale = scale => {\n    const bandwidth = scale.bandwidth()\n\n    if (bandwidth === 0) return scale\n\n    let offset = bandwidth / 2\n    if (scale.round()) {\n        offset = Math.round(offset)\n    }\n\n    return d => scale(d) + offset\n}\n\nconst timeByType = {\n    millisecond: [timeMillisecond, utcMillisecond],\n    second: [timeSecond, utcSecond],\n    minute: [timeMinute, utcMinute],\n    hour: [timeHour, utcHour],\n    day: [timeDay, utcDay],\n    week: [timeWeek, utcWeek],\n    sunday: [timeSunday, utcSunday],\n    monday: [timeMonday, utcMonday],\n    tuesday: [timeTuesday, utcTuesday],\n    wednesday: [timeWednesday, utcWednesday],\n    thursday: [timeThursday, utcThursday],\n    friday: [timeFriday, utcFriday],\n    saturday: [timeSaturday, utcSaturday],\n    month: [timeMonth, utcMonth],\n    year: [timeYear, utcYear],\n}\n\nconst timeTypes = Object.keys(timeByType)\nconst timeIntervalRegexp = new RegExp(`^every\\\\s*(\\\\d+)?\\\\s*(${timeTypes.join('|')})s?$`, 'i')\n\nconst isInteger = value =>\n    typeof value === 'number' && isFinite(value) && Math.floor(value) === value\n\nexport const getScaleTicks = (scale, spec) => {\n    // specific values\n    if (Array.isArray(spec)) {\n        return spec\n    }\n\n    // continuous scales\n    if (scale.ticks) {\n        // default behaviour\n        if (spec === undefined) {\n            return scale.ticks()\n        }\n\n        // specific tick count\n        if (isInteger(spec)) {\n            return scale.ticks(spec)\n        }\n\n        if (typeof spec === 'string') {\n            // time interval\n            const matches = spec.match(timeIntervalRegexp)\n            if (matches) {\n                // UTC is used as it's more predictible\n                // however local time could be used too\n                // let's see how it fits users' requirements\n                const timeType = timeByType[matches[2]][scale.useUTC ? 1 : 0]\n                if (matches[1] === undefined) {\n                    return scale.ticks(timeType)\n                }\n\n                return scale.ticks(timeType.every(Number(matches[1])))\n            }\n\n            throw new Error(`Invalid tickValues: ${spec}`)\n        }\n    }\n\n    // non linear scale default\n    return scale.domain()\n}\n\nexport const computeCartesianTicks = ({\n    axis,\n    scale,\n    ticksPosition,\n    tickValues,\n    tickSize,\n    tickPadding,\n    tickRotation,\n    engine = 'svg',\n}) => {\n    const values = getScaleTicks(scale, tickValues)\n\n    const textProps = textPropsByEngine[engine]\n\n    const position = scale.bandwidth ? centerScale(scale) : scale\n    const line = { lineX: 0, lineY: 0 }\n    const text = { textX: 0, textY: 0 }\n\n    let translate\n    let textAlign = textProps.align.center\n    let textBaseline = textProps.baseline.center\n\n    if (axis === 'x') {\n        translate = d => ({ x: position(d), y: 0 })\n\n        line.lineY = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textY = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textBaseline = textProps.baseline.top\n        } else {\n            textBaseline = textProps.baseline.bottom\n        }\n\n        if (tickRotation === 0) {\n            textAlign = textProps.align.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation < 0) ||\n            (ticksPosition === 'before' && tickRotation > 0)\n        ) {\n            textAlign = textProps.align.right\n            textBaseline = textProps.baseline.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation > 0) ||\n            (ticksPosition === 'before' && tickRotation < 0)\n        ) {\n            textAlign = textProps.align.left\n            textBaseline = textProps.baseline.center\n        }\n    } else {\n        translate = d => ({ x: 0, y: position(d) })\n\n        line.lineX = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textX = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textAlign = textProps.align.left\n        } else {\n            textAlign = textProps.align.right\n        }\n    }\n\n    const ticks = values.map(value => ({\n        key: value,\n        value,\n        ...translate(value),\n        ...line,\n        ...text,\n    }))\n\n    return {\n        ticks,\n        textAlign,\n        textBaseline,\n    }\n}\n\nexport const getFormatter = (format, scale) => {\n    if (!format || typeof format === 'function') return format\n\n    if (scale.type === 'time') {\n        const f = timeFormat(format)\n        return d => f(new Date(d))\n    }\n\n    return d3Format(format)\n}\n\nexport const computeGridLines = ({ width, height, scale, axis, values: _values }) => {\n    const lineValues = Array.isArray(_values) ? _values : undefined\n    const lineCount = isInteger(_values) ? _values : undefined\n\n    const values = lineValues || getScaleTicks(scale, lineCount)\n\n    const position = scale.bandwidth ? centerScale(scale) : scale\n\n    let lines\n    if (axis === 'x') {\n        lines = values.map(v => ({\n            key: `${v}`,\n            x1: position(v),\n            x2: position(v),\n            y1: 0,\n            y2: height,\n        }))\n    } else if (axis === 'y') {\n        lines = values.map(v => ({\n            key: `${v}`,\n            x1: 0,\n            x2: width,\n            y1: position(v),\n            y2: position(v),\n        }))\n    }\n\n    return lines\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport PropTypes from 'prop-types'\n\nexport const axisPropTypes = {\n    ticksPosition: PropTypes.oneOf(['before', 'after']),\n    tickValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n        PropTypes.string,\n    ]),\n    tickSize: PropTypes.number,\n    tickPadding: PropTypes.number,\n    tickRotation: PropTypes.number,\n    format: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    renderTick: PropTypes.func,\n    legend: PropTypes.node,\n    legendPosition: PropTypes.oneOf(['start', 'middle', 'end']),\n    legendOffset: PropTypes.number,\n    ariaHidden: PropTypes.bool,\n}\n\nexport const axisPropType = PropTypes.shape(axisPropTypes)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo } from 'react'\nimport { animated } from 'react-spring'\nimport PropTypes from 'prop-types'\nimport { useTheme } from '@nivo/core'\n\nconst AxisTick = ({\n    value: _value,\n    format,\n    lineX,\n    lineY,\n    onClick,\n    textBaseline,\n    textAnchor,\n    animatedProps,\n}) => {\n    const theme = useTheme()\n\n    let value = _value\n    if (format !== undefined) {\n        value = format(value)\n    }\n\n    let gStyle = { opacity: animatedProps.opacity }\n    if (onClick) {\n        gStyle['cursor'] = 'pointer'\n    }\n\n    return (\n        <animated.g\n            transform={animatedProps.transform}\n            {...(onClick ? { onClick: e => onClick(e, value) } : {})}\n            style={gStyle}\n        >\n            <line x1={0} x2={lineX} y1={0} y2={lineY} style={theme.axis.ticks.line} />\n            <animated.text\n                dominantBaseline={textBaseline}\n                textAnchor={textAnchor}\n                transform={animatedProps.textTransform}\n                style={theme.axis.ticks.text}\n            >\n                {value}\n            </animated.text>\n        </animated.g>\n    )\n}\n\nAxisTick.propTypes = {\n    value: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        .isRequired,\n    format: PropTypes.func,\n    x: PropTypes.number.isRequired,\n    y: PropTypes.number.isRequired,\n    lineX: PropTypes.number.isRequired,\n    lineY: PropTypes.number.isRequired,\n    textX: PropTypes.number.isRequired,\n    textY: PropTypes.number.isRequired,\n    textBaseline: PropTypes.string.isRequired,\n    textAnchor: PropTypes.string.isRequired,\n    opacity: PropTypes.number.isRequired,\n    rotate: PropTypes.number.isRequired,\n    onClick: PropTypes.func,\n    animatedProps: PropTypes.object.isRequired,\n}\nAxisTick.defaultProps = {\n    opacity: 1,\n    rotate: 0,\n}\n\nexport default memo(AxisTick)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo, useMemo } from 'react'\nimport PropTypes from 'prop-types'\nimport { useSpring, useTransition, animated } from 'react-spring'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { computeCartesianTicks, getFormatter } from '../compute'\nimport { axisPropTypes } from '../props'\nimport AxisTick from './AxisTick'\n\nconst defaultTickRenderer = props => <AxisTick {...props} />\n\nconst Axis = ({\n    axis,\n    scale,\n    x,\n    y,\n    length,\n    ticksPosition,\n    tickValues,\n    tickSize,\n    tickPadding,\n    tickRotation,\n    format,\n    renderTick,\n    legend,\n    legendPosition,\n    legendOffset,\n    onClick,\n    ariaHidden,\n}) => {\n    const theme = useTheme()\n\n    const formatValue = useMemo(() => getFormatter(format, scale), [format, scale])\n\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n    })\n\n    let legendNode = null\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAnchor\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n                legendX = length\n            }\n        }\n\n        legendNode = (\n            <text\n                transform={`translate(${legendX}, ${legendY}) rotate(${legendRotation})`}\n                textAnchor={textAnchor}\n                style={{\n                    dominantBaseline: 'central',\n                    ...theme.axis.legend.text,\n                }}\n            >\n                {legend}\n            </text>\n        )\n    }\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        transform: `translate(${x},${y})`,\n        lineX2: axis === 'x' ? length : 0,\n        lineY2: axis === 'x' ? 0 : length,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const transition = useTransition(ticks, {\n        key: tick => tick.key,\n        initial: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        from: tick => ({\n            opacity: 0,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        enter: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        update: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        leave: {\n            opacity: 0,\n        },\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.g transform={animatedProps.transform} aria-hidden={ariaHidden}>\n            {transition((transitionProps, tick, state, tickIndex) => {\n                return React.createElement(renderTick, {\n                    tickIndex,\n                    format: formatValue,\n                    rotate: tickRotation,\n                    textBaseline,\n                    textAnchor: textAlign,\n                    animatedProps: transitionProps,\n                    ...tick,\n                    ...(onClick ? { onClick } : {}),\n                    key: tick.key,\n                })\n            })}\n            <animated.line\n                style={theme.axis.domain.line}\n                x1={0}\n                x2={animatedProps.lineX2}\n                y1={0}\n                y2={animatedProps.lineY2}\n            />\n            {legendNode}\n        </animated.g>\n    )\n}\n\nAxis.propTypes = {\n    axis: PropTypes.oneOf(['x', 'y']).isRequired,\n    scale: PropTypes.func.isRequired,\n    x: PropTypes.number.isRequired,\n    y: PropTypes.number.isRequired,\n    length: PropTypes.number.isRequired,\n    ticksPosition: PropTypes.oneOf(['before', 'after']).isRequired,\n    tickValues: axisPropTypes.tickValues,\n    tickSize: PropTypes.number.isRequired,\n    tickPadding: PropTypes.number.isRequired,\n    tickRotation: PropTypes.number.isRequired,\n    format: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    renderTick: PropTypes.func.isRequired,\n    legend: PropTypes.node,\n    legendPosition: PropTypes.oneOf(['start', 'middle', 'end']).isRequired,\n    legendOffset: PropTypes.number.isRequired,\n    onClick: PropTypes.func,\n    ariaHidden: PropTypes.bool,\n}\nAxis.defaultProps = {\n    x: 0,\n    y: 0,\n    tickSize: 5,\n    tickPadding: 5,\n    tickRotation: 0,\n    renderTick: defaultTickRenderer,\n    legendPosition: 'end',\n    legendOffset: 0,\n}\n\nexport default memo(Axis)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport Axis from './Axis'\nimport { axisPropType } from '../props'\n\nconst positions = ['top', 'right', 'bottom', 'left']\n\nconst Axes = ({ xScale, yScale, width, height, top, right, bottom, left }) => {\n    const axes = { top, right, bottom, left }\n\n    return positions.map(position => {\n        const axis = axes[position]\n\n        if (!axis) return null\n\n        const isXAxis = position === 'top' || position === 'bottom'\n        const ticksPosition = position === 'top' || position === 'left' ? 'before' : 'after'\n\n        return (\n            <Axis\n                key={position}\n                {...axis}\n                axis={isXAxis ? 'x' : 'y'}\n                x={position === 'right' ? width : 0}\n                y={position === 'bottom' ? height : 0}\n                scale={isXAxis ? xScale : yScale}\n                length={isXAxis ? width : height}\n                ticksPosition={ticksPosition}\n            />\n        )\n    })\n}\n\nAxes.propTypes = {\n    xScale: PropTypes.func,\n    yScale: PropTypes.func,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    top: axisPropType,\n    right: axisPropType,\n    bottom: axisPropType,\n    left: axisPropType,\n}\n\nexport default memo(Axes)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { animated } from 'react-spring'\nimport { useTheme } from '@nivo/core'\n\nconst GridLine = ({ animatedProps }) => {\n    const theme = useTheme()\n\n    return <animated.line {...animatedProps} {...theme.grid.line} />\n}\n\nGridLine.propTypes = {\n    x1: PropTypes.number.isRequired,\n    x2: PropTypes.number.isRequired,\n    y1: PropTypes.number.isRequired,\n    y2: PropTypes.number.isRequired,\n    animatedProps: PropTypes.object.isRequired,\n}\nGridLine.defaultProps = {\n    x1: 0,\n    x2: 0,\n    y1: 0,\n    y2: 0,\n}\n\nexport default memo(GridLine)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTransition } from 'react-spring'\nimport { useMotionConfig } from '@nivo/core'\nimport GridLine from './GridLine'\n\nconst GridLines = ({ lines }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition(lines, {\n        key: line => line.key,\n        initial: line => ({\n            opacity: 1,\n            x1: line.x1,\n            x2: line.x2,\n            y1: line.y1,\n            y2: line.y2,\n        }),\n        from: line => ({\n            opacity: 0,\n            x1: line.x1,\n            x2: line.x2,\n            y1: line.y1,\n            y2: line.y2,\n        }),\n        enter: line => ({\n            opacity: 1,\n            x1: line.x1,\n            x2: line.x2,\n            y1: line.y1,\n            y2: line.y2,\n        }),\n        update: line => ({\n            opacity: 1,\n            x1: line.x1,\n            x2: line.x2,\n            y1: line.y1,\n            y2: line.y2,\n        }),\n        leave: {\n            opacity: 0,\n        },\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <g>\n            {transition((animatedProps, line) => (\n                <GridLine {...line} key={line.key} animatedProps={animatedProps} />\n            ))}\n        </g>\n    )\n}\n\nGridLines.propTypes = {\n    type: PropTypes.oneOf(['x', 'y']).isRequired,\n    lines: PropTypes.arrayOf(\n        PropTypes.shape({\n            key: PropTypes.string.isRequired,\n            x1: PropTypes.number,\n            x2: PropTypes.number,\n            y1: PropTypes.number,\n            y2: PropTypes.number,\n        })\n    ).isRequired,\n}\n\nexport default memo(GridLines)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo, useMemo } from 'react'\nimport PropTypes from 'prop-types'\nimport GridLines from './GridLines'\nimport { computeGridLines } from '../compute'\n\nconst Grid = ({ width, height, xScale, yScale, xValues, yValues }) => {\n    const xLines = useMemo(() => {\n        if (!xScale) return false\n\n        return computeGridLines({\n            width,\n            height,\n            scale: xScale,\n            axis: 'x',\n            values: xValues,\n        })\n    }, [xScale, xValues, width, height])\n\n    const yLines = yScale\n        ? computeGridLines({\n              width,\n              height,\n              scale: yScale,\n              axis: 'y',\n              values: yValues,\n          })\n        : false\n\n    return (\n        <>\n            {xLines && <GridLines type=\"x\" lines={xLines} />}\n            {yLines && <GridLines type=\"y\" lines={yLines} />}\n        </>\n    )\n}\n\nGrid.propTypes = {\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n\n    xScale: PropTypes.func,\n    yScale: PropTypes.func,\n    xValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n    ]),\n    yValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n    ]),\n}\n\nexport default memo(Grid)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nexport const degreesToRadians = degrees => (degrees * Math.PI) / 180\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { degreesToRadians } from './utils'\nimport { computeCartesianTicks, getFormatter, computeGridLines } from './compute'\n\nexport const renderAxisToCanvas = (\n    ctx,\n    {\n        axis,\n        scale,\n        x = 0,\n        y = 0,\n        length,\n\n        ticksPosition,\n        tickValues,\n        tickSize = 5,\n        tickPadding = 5,\n        tickRotation = 0,\n        format,\n\n        legend,\n        legendPosition = 'end',\n        legendOffset = 0,\n\n        theme,\n    }\n) => {\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n        engine: 'canvas',\n    })\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.textAlign = textAlign\n    ctx.textBaseline = textBaseline\n    ctx.font = `${theme.axis.ticks.text.fontSize}px ${theme.axis.ticks.text.fontFamily}`\n\n    if (theme.axis.domain.line.strokeWidth > 0) {\n        ctx.lineWidth = theme.axis.domain.line.strokeWidth\n        ctx.lineCap = 'square'\n        ctx.strokeStyle = theme.axis.domain.line.stroke\n        ctx.beginPath()\n        ctx.moveTo(0, 0)\n        ctx.lineTo(axis === 'x' ? length : 0, axis === 'x' ? 0 : length)\n        ctx.stroke()\n    }\n\n    ticks.forEach(tick => {\n        if (theme.axis.ticks.line.strokeWidth > 0) {\n            ctx.lineWidth = theme.axis.ticks.line.strokeWidth\n            ctx.lineCap = 'square'\n            ctx.strokeStyle = theme.axis.ticks.line.stroke\n            ctx.beginPath()\n            ctx.moveTo(tick.x, tick.y)\n            ctx.lineTo(tick.x + tick.lineX, tick.y + tick.lineY)\n            ctx.stroke()\n        }\n\n        const value = format !== undefined ? format(tick.value) : tick.value\n\n        ctx.save()\n        ctx.translate(tick.x + tick.textX, tick.y + tick.textY)\n        ctx.rotate(degreesToRadians(tickRotation))\n        ctx.fillStyle = theme.axis.ticks.text.fill\n        ctx.fillText(value, 0, 0)\n        ctx.restore()\n    })\n\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAlign\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n                legendX = length\n            }\n        }\n\n        ctx.translate(legendX, legendY)\n        ctx.rotate(degreesToRadians(legendRotation))\n        ctx.font = `${\n            theme.axis.legend.text.fontWeight ? `${theme.axis.legend.text.fontWeight} ` : ''\n        }${theme.axis.legend.text.fontSize}px ${theme.axis.legend.text.fontFamily}`\n        ctx.fillStyle = theme.axis.legend.text.fill\n        ctx.textAlign = textAlign\n        ctx.textBaseline = 'middle'\n        ctx.fillText(legend, 0, 0)\n    }\n\n    ctx.restore()\n}\n\nconst positions = ['top', 'right', 'bottom', 'left']\n\nexport const renderAxesToCanvas = (\n    ctx,\n    {\n        xScale,\n        yScale,\n        width,\n        height,\n\n        top,\n        right,\n        bottom,\n        left,\n\n        theme,\n    }\n) => {\n    const axes = { top, right, bottom, left }\n\n    positions.forEach(position => {\n        const axis = axes[position]\n\n        if (!axis) return null\n\n        const isXAxis = position === 'top' || position === 'bottom'\n        const ticksPosition = position === 'top' || position === 'left' ? 'before' : 'after'\n        const scale = isXAxis ? xScale : yScale\n        const format = getFormatter(axis.format, scale)\n\n        renderAxisToCanvas(ctx, {\n            ...axis,\n            axis: isXAxis ? 'x' : 'y',\n            x: position === 'right' ? width : 0,\n            y: position === 'bottom' ? height : 0,\n            scale,\n            format,\n            length: isXAxis ? width : height,\n            ticksPosition,\n            theme,\n        })\n    })\n}\n\nexport const renderGridLinesToCanvas = (ctx, { width, height, scale, axis, values }) => {\n    const lines = computeGridLines({ width, height, scale, axis, values })\n\n    lines.forEach(line => {\n        ctx.beginPath()\n        ctx.moveTo(line.x1, line.y1)\n        ctx.lineTo(line.x2, line.y2)\n        ctx.stroke()\n    })\n}\n"]},"metadata":{},"sourceType":"module"}