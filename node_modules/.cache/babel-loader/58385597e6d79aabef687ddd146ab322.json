{"ast":null,"code":"import axios from \"axios\";\nimport axiosInstance from \"../../helpers/AxiosInstance\";\nimport { LOGIN_LOADING, LOGIN_SUCCESS, LOGIN_ERROR } from \"../../helpers/constants\";\nexport const login = ({\n  email,\n  password\n}) => dispatch => {\n  dispatch({\n    type: LOGIN_LOADING\n  });\n  const options = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\"\n    }\n  }; // axios.post(\"http://127.0.0.1:5000/auth\", { email, password })\n  //   .then((res) => {\n  //     localStorage.token = res.data.token;\n  //     dispatch({\n  //       type: LOGIN_SUCCESS,\n  //       payload: res.data,\n  //     });\n  //   })\n  //   .catch((err) => {\n  //     dispatch({\n  //       type: LOGIN_ERROR,\n  //       payload: err.response ? err.response.data : \"COULD NOT CONNECT\",\n  //     });\n  //   })\n\n  fetch(\"http://127.0.0.1:5000/auth\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\"\n    },\n    body: JSON.stringify({\n      username: email,\n      password: password\n    })\n  }).then(resp => resp.json()).then(data => {\n    if (data.message) {\n      // invalid username and password. 401 condition\n      this.setState({\n        jwtToken: \"\",\n        isLogin: false,\n        message: \"Invalid login\"\n      });\n    } else {\n      if (data.access_token == undefined) {\n        this.setState({\n          jwtToken: data.access_token,\n          isLogin: false,\n          message: \"Invalid login\"\n        });\n      } else {\n        localStorage.setItem(\"token\", data.access_token);\n        this.setState({\n          jwtToken: data.access_token,\n          isLogin: true,\n          message: \"Your logged in with Authentication token \" + data.access_token\n        });\n      }\n    }\n  });\n};","map":{"version":3,"sources":["/home/riya/social-monitoring/src/context/actions/auth.js"],"names":["axios","axiosInstance","LOGIN_LOADING","LOGIN_SUCCESS","LOGIN_ERROR","login","email","password","dispatch","type","options","headers","Accept","fetch","method","body","JSON","stringify","username","then","resp","json","data","message","setState","jwtToken","isLogin","access_token","undefined","localStorage","setItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,SACEC,aADF,EAEEC,aAFF,EAGEC,WAHF,QAIO,yBAJP;AAKA,OAAO,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAA0BC,QAAD,IAAc;AAC1DA,EAAAA,QAAQ,CAAC;AACPC,IAAAA,IAAI,EAAEP;AADC,GAAD,CAAR;AAIA,QAAMQ,OAAO,GAAG;AACdC,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEPC,MAAAA,MAAM,EAAE;AAFD;AADK,GAAhB,CAL0D,CAY1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,EAAAA,KAAK,CAAC,4BAAD,EAA+B;AAClCC,IAAAA,MAAM,EAAE,MAD0B;AAElCH,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEPC,MAAAA,MAAM,EAAE;AAFD,KAFyB;AAMlCG,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,MAAAA,QAAQ,EAAEZ,KADS;AAEnBC,MAAAA,QAAQ,EAAEA;AAFS,KAAf;AAN4B,GAA/B,CAAL,CAWGY,IAXH,CAWQC,IAAI,IAAIA,IAAI,CAACC,IAAL,EAXhB,EAYGF,IAZH,CAYQG,IAAI,IAAI;AACZ,QAAIA,IAAI,CAACC,OAAT,EAAkB;AAChB;AACA,WAAKC,QAAL,CAAc;AACZC,QAAAA,QAAQ,EAAE,EADE;AAEZC,QAAAA,OAAO,EAAE,KAFG;AAGZH,QAAAA,OAAO,EAAE;AAHG,OAAd;AAKD,KAPD,MAOO;AACL,UAAID,IAAI,CAACK,YAAL,IAAqBC,SAAzB,EAAoC;AAClC,aAAKJ,QAAL,CAAc;AACZC,UAAAA,QAAQ,EAAEH,IAAI,CAACK,YADH;AAEZD,UAAAA,OAAO,EAAE,KAFG;AAGZH,UAAAA,OAAO,EAAE;AAHG,SAAd;AAKD,OAND,MAMO;AACLM,QAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BR,IAAI,CAACK,YAAnC;AACA,aAAKH,QAAL,CAAc;AACZC,UAAAA,QAAQ,EAAEH,IAAI,CAACK,YADH;AAEZD,UAAAA,OAAO,EAAE,IAFG;AAGZH,UAAAA,OAAO,EACL,8CAA8CD,IAAI,CAACK;AAJzC,SAAd;AAMD;AACF;AACF,GArCH;AAuCD,CAlEM","sourcesContent":["import axios from \"axios\";\nimport axiosInstance from \"../../helpers/AxiosInstance\";\nimport {\n  LOGIN_LOADING,\n  LOGIN_SUCCESS,\n  LOGIN_ERROR,\n} from \"../../helpers/constants\";\nexport const login = ({ email, password }) => (dispatch) => {\n  dispatch({\n    type: LOGIN_LOADING,\n  });\n\n  const options = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\"\n    }\n  };\n\n  // axios.post(\"http://127.0.0.1:5000/auth\", { email, password })\n  //   .then((res) => {\n  //     localStorage.token = res.data.token;\n  //     dispatch({\n  //       type: LOGIN_SUCCESS,\n  //       payload: res.data,\n  //     });\n  //   })\n  //   .catch((err) => {\n  //     dispatch({\n  //       type: LOGIN_ERROR,\n  //       payload: err.response ? err.response.data : \"COULD NOT CONNECT\",\n  //     });\n  //   })\n\n  fetch(\"http://127.0.0.1:5000/auth\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\"\n    },\n    body: JSON.stringify({\n      username: email,\n      password: password\n    })\n  })\n    .then(resp => resp.json())\n    .then(data => {\n      if (data.message) {\n        // invalid username and password. 401 condition\n        this.setState({\n          jwtToken: \"\",\n          isLogin: false,\n          message: \"Invalid login\"\n        });\n      } else {\n        if (data.access_token == undefined) {\n          this.setState({\n            jwtToken: data.access_token,\n            isLogin: false,\n            message: \"Invalid login\"\n          });\n        } else {\n          localStorage.setItem(\"token\", data.access_token);\n          this.setState({\n            jwtToken: data.access_token,\n            isLogin: true,\n            message:\n              \"Your logged in with Authentication token \" + data.access_token\n          });\n        }\n      }\n    });\n\n}\n\n"]},"metadata":{},"sourceType":"module"}